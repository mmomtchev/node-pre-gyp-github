

  Publishes packages to GitHub Releases
    Publishes without an error under all options
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      1) should publish without error in all scenarios
    Throws an error when node-pre-gyp-github is not configured properly
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      2) should throw an error when missing repository.url in package.json
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      3) should throw an error when a correctly formatted GitHub repository.url is not found in package.json
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      4) should throw an error when missing binary.host in package.json
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      5) should throw an error when binary.host does not begin with the correct url
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      6) should throw an error when the NODE_PRE_GYP_GITHUB_TOKEN environment variable is not found
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      7) should throw an error when octokit.repos.getReleases returns an error
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      8) should throw an error when octokit.repos.createRelease returns an error
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      9) should throw an error when the stage directory structure is missing
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      10) should throw an error when there are no files found within the stage directory
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      11) should throw an error when a staged file already exists in the current release
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      12) should throw an error when github.releases.uploadAsset returns an error
    Verify backwords compatible with any breaking changes made within the same MINOR version.
OctokitWithDefaults {
  request: [Function: newApi] {
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    },
    defaults: [Function: bound withDefaults]
  },
  graphql: [Function: newApi] {
    defaults: [Function: bound withDefaults],
    endpoint: [Function: bound endpointWithDefaults] {
      DEFAULTS: [Object],
      defaults: [Function: bound withDefaults],
      merge: [Function: bound merge],
      parse: [Function: parse]
    }
  },
  log: {
    debug: [Function: debug],
    info: [Function: info],
    warn: [Function: bound warn],
    error: [Function: bound error]
  },
  hook: [Function: bound register] {
    api: {
      remove: [Function: bound removeHook],
      before: [Function: bound addHook],
      error: [Function: bound addHook],
      after: [Function: bound addHook],
      wrap: [Function: bound addHook]
    },
    remove: [Function: bound removeHook],
    before: [Function: bound addHook],
    error: [Function: bound addHook],
    after: [Function: bound addHook],
    wrap: [Function: bound addHook]
  },
  auth: [AsyncFunction (anonymous)],
  actions: {
    addSelectedRepoToOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    approveWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRegistrationTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRemoveTokenForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWorkflowDispatch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteSelfHostedRunnerFromRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadJobLogsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadWorkflowRunLogs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedRepositoryGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArtifact: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironmentSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getJobForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPermissions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoPublicKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSelfHostedRunnerForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowRunUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWorkflowUsage: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listArtifactsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEnvironmentSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listJobsForWorkflowRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoSecrets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoWorkflows: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRunnerApplicationsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelfHostedRunnersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunArtifacts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRuns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWorkflowRunsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeSelectedRepoFromOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    retryWorkflow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    reviewPendingDeploymentsForRun: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsRepository: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedReposForOrgSecret: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedRepositoriesEnabledGithubActionsOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getFeeds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThread: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getThreadSubscriptionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOrgEventsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForRepoNetwork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicOrgEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReceivedPublicEventsForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRepoNotificationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposStarredByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposWatchedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStargazersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchedReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWatchersForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markRepoNotificationsAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    markThreadAsRead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRepoSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setThreadSubscription: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    starRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstarRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  apps: {
    addRepoToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createContentAttachmentForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFromManifest: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAuthorization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBySlug: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOrgInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRepoInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccount: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSubscriptionPlanForAccountStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUserInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlan: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAccountsForPlanStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationReposForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInstallationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlans: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPlansStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposAccessibleToInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSubscriptionsForAuthenticatedUserStubbed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoFromInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    resetToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    revokeInstallationAccessToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    scopeToken: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    suspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unsuspendInstallation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForApp: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  billing: {
    getGithubActionsBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubPackagesBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSharedStorageBillingUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  checks: {
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAnnotations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSuitesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    rerequestSuite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSuitesPreferences: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codeScanning: {
    deleteAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAlert: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAnalysis: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertInstances: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsInstances: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRecentAnalyses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadSarif: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  codesOfConduct: {
    getAllCodesOfConduct: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getConductCode: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  emojis: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  enterpriseAdmin: {
    disableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableSelectedOrganizationGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAllowedActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setGithubActionsPermissionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gists: {
    checkIsStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    fork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRevision: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listStarred: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    star: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unstar: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  git: {
    createBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBlob: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTree: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMatchingRefs: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  gitignore: {
    getAllTemplates: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setRestrictionsForYourPublicRepos: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  issues: {
    addAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkUserCanBeAssigned: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEvents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEventsForTimeline: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLabelsOnIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMilestones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    lock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAllLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAssignees: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLabels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateLabel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMilestone: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  licenses: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllCommonlyUsed: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  markdown: {
    render: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renderRaw: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  meta: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getOctocat: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getZen: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    root: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  migrations: {
    cancelImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchiveForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getArchiveForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitAuthors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getImportStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLargeFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mapCommitAuthor: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setLfsPreference: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    startImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unlockRepoForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateImport: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  orgs: {
    blockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    cancelInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlockedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPublicMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    convertMemberToOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAppInstallations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedUsers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFailedInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembershipsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listOutsideCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicMembers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMember: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeOutsideCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removePublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setMembershipForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPublicMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblockUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateMembershipForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  packages: {
    deletePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByAnOrg: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllPackageVersionsForPackageOwnedByUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForOrganization: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPackagesForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    restorePackageVersionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  projects: {
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPermissionForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCards: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listColumns: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    moveColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCard: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateColumn: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  pulls: {
    checkIfMerged: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReplyForReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePendingReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    dismissReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFiles: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewComments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviewCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReviews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRequestedReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestReviewers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    submitReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReview: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rateLimit: {
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  reactions: {
    createForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForPullRequestComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussion: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteForTeamDiscussionComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteLegacy: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssue: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForIssueComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForPullRequestReviewComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForTeamDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  repos: {
    acceptInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    compareCommitsWithBasehead: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createCommitStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDispatchEvent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createFork: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createOrUpdateFileContents: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createUsingTemplate: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    declineInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    delete: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAnEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteFile: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    disableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadArchive: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadTarballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    downloadZipballArchive: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableAutomatedSecurityFixes: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableLfsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    enableVulnerabilityAlerts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    get: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAccessRestrictions: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllEnvironments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllStatusCheckContexts: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAppsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAutolink: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getClones: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCodeFrequencyStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCollaboratorPermissionLevel: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCombinedStatusForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitActivityStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommitSignatureProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getCommunityProfileMetrics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContent: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContributorsStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployKey: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeployment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDeploymentStatus: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getEnvironment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getLatestRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPagesHealthCheck: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getParticipationStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPunchCardStats: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadme: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReadmeInDirectory: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getReleaseByTag: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getStatusChecksProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTeamsWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopPaths: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getTopReferrers: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getUsersWithAccessToProtectedBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getViews: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAutolinks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranches: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBranchesForHeadCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCollaborators: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommentsForCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitCommentsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommitStatusesForRef: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listCommits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listContributors: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployKeys: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeploymentStatuses: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDeployments: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitations: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listInvitationsForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listLanguages: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPagesBuilds: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublic: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPullRequestsAssociatedWithCommit: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleaseAssets: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReleases: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTags: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listTeams: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhookDeliveries: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listWebhooks: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    merge: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    mergeUpstream: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    pingWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    redeliverWebhookDelivery: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeCollaborator: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    renameBranch: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    replaceAllTopics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    requestPagesBuild: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAdminBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setAppAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setStatusCheckContexts: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setTeamAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setUserAccessRestrictions: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    testPushWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    transfer: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    update: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateBranchProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateCommitComment: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInformationAboutPagesSite: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInvitation: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updatePullRequestReviewProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateRelease: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckPotection: [Function: withDecorations] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateStatusCheckProtection: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhook: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateWebhookConfigForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    uploadReleaseAsset: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  search: {
    code: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    commits: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    issuesAndPullRequests: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    labels: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    repos: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    topics: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    users: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  secretScanning: {
    getAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listAlertsForRepo: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAlert: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateProjectPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    addOrUpdateRepoPermissionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPermissionsForRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    create: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByName: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listChildInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionCommentsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listDiscussionsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listMembersInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPendingInvitationsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listProjectsInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listReposInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeMembershipForUserInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeProjectInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    removeRepoInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionCommentInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateDiscussionInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateInOrg: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  users: {
    addEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    block: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkBlocked: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    checkPersonIsFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    createPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteEmailForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deleteGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    deletePublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    follow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getByUsername: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getContextForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getGpgKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    getPublicSshKeyForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    list: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listBlockedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowedByAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForAuthenticatedUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowersForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listFollowingForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listGpgKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicEmailsForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicKeysForUser: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    listPublicSshKeysForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    setPrimaryEmailVisibilityForAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unblock: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    unfollow: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    },
    updateAuthenticated: [Function: newApi] {
      endpoint: [Function],
      defaults: [Function: bound withDefaults]
    }
  },
  rest: {
    actions: {
      addSelectedRepoToOrgSecret: [Function],
      approveWorkflowRun: [Function],
      cancelWorkflowRun: [Function],
      createOrUpdateEnvironmentSecret: [Function],
      createOrUpdateOrgSecret: [Function],
      createOrUpdateRepoSecret: [Function],
      createRegistrationTokenForOrg: [Function],
      createRegistrationTokenForRepo: [Function],
      createRemoveTokenForOrg: [Function],
      createRemoveTokenForRepo: [Function],
      createWorkflowDispatch: [Function],
      deleteArtifact: [Function],
      deleteEnvironmentSecret: [Function],
      deleteOrgSecret: [Function],
      deleteRepoSecret: [Function],
      deleteSelfHostedRunnerFromOrg: [Function],
      deleteSelfHostedRunnerFromRepo: [Function],
      deleteWorkflowRun: [Function],
      deleteWorkflowRunLogs: [Function],
      disableSelectedRepositoryGithubActionsOrganization: [Function],
      disableWorkflow: [Function],
      downloadArtifact: [Function],
      downloadJobLogsForWorkflowRun: [Function],
      downloadWorkflowRunLogs: [Function],
      enableSelectedRepositoryGithubActionsOrganization: [Function],
      enableWorkflow: [Function],
      getAllowedActionsOrganization: [Function],
      getAllowedActionsRepository: [Function],
      getArtifact: [Function],
      getEnvironmentPublicKey: [Function],
      getEnvironmentSecret: [Function],
      getGithubActionsPermissionsOrganization: [Function],
      getGithubActionsPermissionsRepository: [Function],
      getJobForWorkflowRun: [Function],
      getOrgPublicKey: [Function],
      getOrgSecret: [Function],
      getPendingDeploymentsForRun: [Function],
      getRepoPermissions: [Function],
      getRepoPublicKey: [Function],
      getRepoSecret: [Function],
      getReviewsForRun: [Function],
      getSelfHostedRunnerForOrg: [Function],
      getSelfHostedRunnerForRepo: [Function],
      getWorkflow: [Function],
      getWorkflowRun: [Function],
      getWorkflowRunUsage: [Function],
      getWorkflowUsage: [Function],
      listArtifactsForRepo: [Function],
      listEnvironmentSecrets: [Function],
      listJobsForWorkflowRun: [Function],
      listOrgSecrets: [Function],
      listRepoSecrets: [Function],
      listRepoWorkflows: [Function],
      listRunnerApplicationsForOrg: [Function],
      listRunnerApplicationsForRepo: [Function],
      listSelectedReposForOrgSecret: [Function],
      listSelectedRepositoriesEnabledGithubActionsOrganization: [Function],
      listSelfHostedRunnersForOrg: [Function],
      listSelfHostedRunnersForRepo: [Function],
      listWorkflowRunArtifacts: [Function],
      listWorkflowRuns: [Function],
      listWorkflowRunsForRepo: [Function],
      removeSelectedRepoFromOrgSecret: [Function],
      retryWorkflow: [Function],
      reviewPendingDeploymentsForRun: [Function],
      setAllowedActionsOrganization: [Function],
      setAllowedActionsRepository: [Function],
      setGithubActionsPermissionsOrganization: [Function],
      setGithubActionsPermissionsRepository: [Function],
      setSelectedReposForOrgSecret: [Function],
      setSelectedRepositoriesEnabledGithubActionsOrganization: [Function]
    },
    activity: {
      checkRepoIsStarredByAuthenticatedUser: [Function],
      deleteRepoSubscription: [Function],
      deleteThreadSubscription: [Function],
      getFeeds: [Function],
      getRepoSubscription: [Function],
      getThread: [Function],
      getThreadSubscriptionForAuthenticatedUser: [Function],
      listEventsForAuthenticatedUser: [Function],
      listNotificationsForAuthenticatedUser: [Function],
      listOrgEventsForAuthenticatedUser: [Function],
      listPublicEvents: [Function],
      listPublicEventsForRepoNetwork: [Function],
      listPublicEventsForUser: [Function],
      listPublicOrgEvents: [Function],
      listReceivedEventsForUser: [Function],
      listReceivedPublicEventsForUser: [Function],
      listRepoEvents: [Function],
      listRepoNotificationsForAuthenticatedUser: [Function],
      listReposStarredByAuthenticatedUser: [Function],
      listReposStarredByUser: [Function],
      listReposWatchedByUser: [Function],
      listStargazersForRepo: [Function],
      listWatchedReposForAuthenticatedUser: [Function],
      listWatchersForRepo: [Function],
      markNotificationsAsRead: [Function],
      markRepoNotificationsAsRead: [Function],
      markThreadAsRead: [Function],
      setRepoSubscription: [Function],
      setThreadSubscription: [Function],
      starRepoForAuthenticatedUser: [Function],
      unstarRepoForAuthenticatedUser: [Function]
    },
    apps: {
      addRepoToInstallation: [Function],
      checkToken: [Function],
      createContentAttachment: [Function],
      createContentAttachmentForRepo: [Function],
      createFromManifest: [Function],
      createInstallationAccessToken: [Function],
      deleteAuthorization: [Function],
      deleteInstallation: [Function],
      deleteToken: [Function],
      getAuthenticated: [Function],
      getBySlug: [Function],
      getInstallation: [Function],
      getOrgInstallation: [Function],
      getRepoInstallation: [Function],
      getSubscriptionPlanForAccount: [Function],
      getSubscriptionPlanForAccountStubbed: [Function],
      getUserInstallation: [Function],
      getWebhookConfigForApp: [Function],
      getWebhookDelivery: [Function],
      listAccountsForPlan: [Function],
      listAccountsForPlanStubbed: [Function],
      listInstallationReposForAuthenticatedUser: [Function],
      listInstallations: [Function],
      listInstallationsForAuthenticatedUser: [Function],
      listPlans: [Function],
      listPlansStubbed: [Function],
      listReposAccessibleToInstallation: [Function],
      listSubscriptionsForAuthenticatedUser: [Function],
      listSubscriptionsForAuthenticatedUserStubbed: [Function],
      listWebhookDeliveries: [Function],
      redeliverWebhookDelivery: [Function],
      removeRepoFromInstallation: [Function],
      resetToken: [Function],
      revokeInstallationAccessToken: [Function],
      scopeToken: [Function],
      suspendInstallation: [Function],
      unsuspendInstallation: [Function],
      updateWebhookConfigForApp: [Function]
    },
    billing: {
      getGithubActionsBillingOrg: [Function],
      getGithubActionsBillingUser: [Function],
      getGithubPackagesBillingOrg: [Function],
      getGithubPackagesBillingUser: [Function],
      getSharedStorageBillingOrg: [Function],
      getSharedStorageBillingUser: [Function]
    },
    checks: {
      create: [Function],
      createSuite: [Function],
      get: [Function],
      getSuite: [Function],
      listAnnotations: [Function],
      listForRef: [Function],
      listForSuite: [Function],
      listSuitesForRef: [Function],
      rerequestSuite: [Function],
      setSuitesPreferences: [Function],
      update: [Function]
    },
    codeScanning: {
      deleteAnalysis: [Function],
      getAlert: [Function],
      getAnalysis: [Function],
      getSarif: [Function],
      listAlertInstances: [Function],
      listAlertsForRepo: [Function],
      listAlertsInstances: [Function],
      listRecentAnalyses: [Function],
      updateAlert: [Function],
      uploadSarif: [Function]
    },
    codesOfConduct: {
      getAllCodesOfConduct: [Function],
      getConductCode: [Function],
      getForRepo: [Function]
    },
    emojis: { get: [Function] },
    enterpriseAdmin: {
      disableSelectedOrganizationGithubActionsEnterprise: [Function],
      enableSelectedOrganizationGithubActionsEnterprise: [Function],
      getAllowedActionsEnterprise: [Function],
      getGithubActionsPermissionsEnterprise: [Function],
      listSelectedOrganizationsEnabledGithubActionsEnterprise: [Function],
      setAllowedActionsEnterprise: [Function],
      setGithubActionsPermissionsEnterprise: [Function],
      setSelectedOrganizationsEnabledGithubActionsEnterprise: [Function]
    },
    gists: {
      checkIsStarred: [Function],
      create: [Function],
      createComment: [Function],
      delete: [Function],
      deleteComment: [Function],
      fork: [Function],
      get: [Function],
      getComment: [Function],
      getRevision: [Function],
      list: [Function],
      listComments: [Function],
      listCommits: [Function],
      listForUser: [Function],
      listForks: [Function],
      listPublic: [Function],
      listStarred: [Function],
      star: [Function],
      unstar: [Function],
      update: [Function],
      updateComment: [Function]
    },
    git: {
      createBlob: [Function],
      createCommit: [Function],
      createRef: [Function],
      createTag: [Function],
      createTree: [Function],
      deleteRef: [Function],
      getBlob: [Function],
      getCommit: [Function],
      getRef: [Function],
      getTag: [Function],
      getTree: [Function],
      listMatchingRefs: [Function],
      updateRef: [Function]
    },
    gitignore: { getAllTemplates: [Function], getTemplate: [Function] },
    interactions: {
      getRestrictionsForAuthenticatedUser: [Function],
      getRestrictionsForOrg: [Function],
      getRestrictionsForRepo: [Function],
      getRestrictionsForYourPublicRepos: [Function],
      removeRestrictionsForAuthenticatedUser: [Function],
      removeRestrictionsForOrg: [Function],
      removeRestrictionsForRepo: [Function],
      removeRestrictionsForYourPublicRepos: [Function],
      setRestrictionsForAuthenticatedUser: [Function],
      setRestrictionsForOrg: [Function],
      setRestrictionsForRepo: [Function],
      setRestrictionsForYourPublicRepos: [Function]
    },
    issues: {
      addAssignees: [Function],
      addLabels: [Function],
      checkUserCanBeAssigned: [Function],
      create: [Function],
      createComment: [Function],
      createLabel: [Function],
      createMilestone: [Function],
      deleteComment: [Function],
      deleteLabel: [Function],
      deleteMilestone: [Function],
      get: [Function],
      getComment: [Function],
      getEvent: [Function],
      getLabel: [Function],
      getMilestone: [Function],
      list: [Function],
      listAssignees: [Function],
      listComments: [Function],
      listCommentsForRepo: [Function],
      listEvents: [Function],
      listEventsForRepo: [Function],
      listEventsForTimeline: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listLabelsForMilestone: [Function],
      listLabelsForRepo: [Function],
      listLabelsOnIssue: [Function],
      listMilestones: [Function],
      lock: [Function],
      removeAllLabels: [Function],
      removeAssignees: [Function],
      removeLabel: [Function],
      setLabels: [Function],
      unlock: [Function],
      update: [Function],
      updateComment: [Function],
      updateLabel: [Function],
      updateMilestone: [Function]
    },
    licenses: {
      get: [Function],
      getAllCommonlyUsed: [Function],
      getForRepo: [Function]
    },
    markdown: { render: [Function], renderRaw: [Function] },
    meta: {
      get: [Function],
      getOctocat: [Function],
      getZen: [Function],
      root: [Function]
    },
    migrations: {
      cancelImport: [Function],
      deleteArchiveForAuthenticatedUser: [Function],
      deleteArchiveForOrg: [Function],
      downloadArchiveForOrg: [Function],
      getArchiveForAuthenticatedUser: [Function],
      getCommitAuthors: [Function],
      getImportStatus: [Function],
      getLargeFiles: [Function],
      getStatusForAuthenticatedUser: [Function],
      getStatusForOrg: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listReposForOrg: [Function],
      listReposForUser: [Function],
      mapCommitAuthor: [Function],
      setLfsPreference: [Function],
      startForAuthenticatedUser: [Function],
      startForOrg: [Function],
      startImport: [Function],
      unlockRepoForAuthenticatedUser: [Function],
      unlockRepoForOrg: [Function],
      updateImport: [Function]
    },
    orgs: {
      blockUser: [Function],
      cancelInvitation: [Function],
      checkBlockedUser: [Function],
      checkMembershipForUser: [Function],
      checkPublicMembershipForUser: [Function],
      convertMemberToOutsideCollaborator: [Function],
      createInvitation: [Function],
      createWebhook: [Function],
      deleteWebhook: [Function],
      get: [Function],
      getMembershipForAuthenticatedUser: [Function],
      getMembershipForUser: [Function],
      getWebhook: [Function],
      getWebhookConfigForOrg: [Function],
      getWebhookDelivery: [Function],
      list: [Function],
      listAppInstallations: [Function],
      listBlockedUsers: [Function],
      listFailedInvitations: [Function],
      listForAuthenticatedUser: [Function],
      listForUser: [Function],
      listInvitationTeams: [Function],
      listMembers: [Function],
      listMembershipsForAuthenticatedUser: [Function],
      listOutsideCollaborators: [Function],
      listPendingInvitations: [Function],
      listPublicMembers: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeMember: [Function],
      removeMembershipForUser: [Function],
      removeOutsideCollaborator: [Function],
      removePublicMembershipForAuthenticatedUser: [Function],
      setMembershipForUser: [Function],
      setPublicMembershipForAuthenticatedUser: [Function],
      unblockUser: [Function],
      update: [Function],
      updateMembershipForAuthenticatedUser: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForOrg: [Function]
    },
    packages: {
      deletePackageForAuthenticatedUser: [Function],
      deletePackageForOrg: [Function],
      deletePackageForUser: [Function],
      deletePackageVersionForAuthenticatedUser: [Function],
      deletePackageVersionForOrg: [Function],
      deletePackageVersionForUser: [Function],
      getAllPackageVersionsForAPackageOwnedByAnOrg: [Function],
      getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [Function],
      getAllPackageVersionsForPackageOwnedByOrg: [Function],
      getAllPackageVersionsForPackageOwnedByUser: [Function],
      getPackageForAuthenticatedUser: [Function],
      getPackageForOrganization: [Function],
      getPackageForUser: [Function],
      getPackageVersionForAuthenticatedUser: [Function],
      getPackageVersionForOrganization: [Function],
      getPackageVersionForUser: [Function],
      listPackagesForAuthenticatedUser: [Function],
      listPackagesForOrganization: [Function],
      listPackagesForUser: [Function],
      restorePackageForAuthenticatedUser: [Function],
      restorePackageForOrg: [Function],
      restorePackageForUser: [Function],
      restorePackageVersionForAuthenticatedUser: [Function],
      restorePackageVersionForOrg: [Function],
      restorePackageVersionForUser: [Function]
    },
    projects: {
      addCollaborator: [Function],
      createCard: [Function],
      createColumn: [Function],
      createForAuthenticatedUser: [Function],
      createForOrg: [Function],
      createForRepo: [Function],
      delete: [Function],
      deleteCard: [Function],
      deleteColumn: [Function],
      get: [Function],
      getCard: [Function],
      getColumn: [Function],
      getPermissionForUser: [Function],
      listCards: [Function],
      listCollaborators: [Function],
      listColumns: [Function],
      listForOrg: [Function],
      listForRepo: [Function],
      listForUser: [Function],
      moveCard: [Function],
      moveColumn: [Function],
      removeCollaborator: [Function],
      update: [Function],
      updateCard: [Function],
      updateColumn: [Function]
    },
    pulls: {
      checkIfMerged: [Function],
      create: [Function],
      createReplyForReviewComment: [Function],
      createReview: [Function],
      createReviewComment: [Function],
      deletePendingReview: [Function],
      deleteReviewComment: [Function],
      dismissReview: [Function],
      get: [Function],
      getReview: [Function],
      getReviewComment: [Function],
      list: [Function],
      listCommentsForReview: [Function],
      listCommits: [Function],
      listFiles: [Function],
      listRequestedReviewers: [Function],
      listReviewComments: [Function],
      listReviewCommentsForRepo: [Function],
      listReviews: [Function],
      merge: [Function],
      removeRequestedReviewers: [Function],
      requestReviewers: [Function],
      submitReview: [Function],
      update: [Function],
      updateBranch: [Function],
      updateReview: [Function],
      updateReviewComment: [Function]
    },
    rateLimit: { get: [Function] },
    reactions: {
      createForCommitComment: [Function],
      createForIssue: [Function],
      createForIssueComment: [Function],
      createForPullRequestReviewComment: [Function],
      createForRelease: [Function],
      createForTeamDiscussionCommentInOrg: [Function],
      createForTeamDiscussionInOrg: [Function],
      deleteForCommitComment: [Function],
      deleteForIssue: [Function],
      deleteForIssueComment: [Function],
      deleteForPullRequestComment: [Function],
      deleteForTeamDiscussion: [Function],
      deleteForTeamDiscussionComment: [Function],
      deleteLegacy: [Function],
      listForCommitComment: [Function],
      listForIssue: [Function],
      listForIssueComment: [Function],
      listForPullRequestReviewComment: [Function],
      listForTeamDiscussionCommentInOrg: [Function],
      listForTeamDiscussionInOrg: [Function]
    },
    repos: {
      acceptInvitation: [Function],
      addAppAccessRestrictions: [Function],
      addCollaborator: [Function],
      addStatusCheckContexts: [Function],
      addTeamAccessRestrictions: [Function],
      addUserAccessRestrictions: [Function],
      checkCollaborator: [Function],
      checkVulnerabilityAlerts: [Function],
      compareCommits: [Function],
      compareCommitsWithBasehead: [Function],
      createAutolink: [Function],
      createCommitComment: [Function],
      createCommitSignatureProtection: [Function],
      createCommitStatus: [Function],
      createDeployKey: [Function],
      createDeployment: [Function],
      createDeploymentStatus: [Function],
      createDispatchEvent: [Function],
      createForAuthenticatedUser: [Function],
      createFork: [Function],
      createInOrg: [Function],
      createOrUpdateEnvironment: [Function],
      createOrUpdateFileContents: [Function],
      createPagesSite: [Function],
      createRelease: [Function],
      createUsingTemplate: [Function],
      createWebhook: [Function],
      declineInvitation: [Function],
      delete: [Function],
      deleteAccessRestrictions: [Function],
      deleteAdminBranchProtection: [Function],
      deleteAnEnvironment: [Function],
      deleteAutolink: [Function],
      deleteBranchProtection: [Function],
      deleteCommitComment: [Function],
      deleteCommitSignatureProtection: [Function],
      deleteDeployKey: [Function],
      deleteDeployment: [Function],
      deleteFile: [Function],
      deleteInvitation: [Function],
      deletePagesSite: [Function],
      deletePullRequestReviewProtection: [Function],
      deleteRelease: [Function],
      deleteReleaseAsset: [Function],
      deleteWebhook: [Function],
      disableAutomatedSecurityFixes: [Function],
      disableLfsForRepo: [Function],
      disableVulnerabilityAlerts: [Function],
      downloadArchive: [Function],
      downloadTarballArchive: [Function],
      downloadZipballArchive: [Function],
      enableAutomatedSecurityFixes: [Function],
      enableLfsForRepo: [Function],
      enableVulnerabilityAlerts: [Function],
      get: [Function],
      getAccessRestrictions: [Function],
      getAdminBranchProtection: [Function],
      getAllEnvironments: [Function],
      getAllStatusCheckContexts: [Function],
      getAllTopics: [Function],
      getAppsWithAccessToProtectedBranch: [Function],
      getAutolink: [Function],
      getBranch: [Function],
      getBranchProtection: [Function],
      getClones: [Function],
      getCodeFrequencyStats: [Function],
      getCollaboratorPermissionLevel: [Function],
      getCombinedStatusForRef: [Function],
      getCommit: [Function],
      getCommitActivityStats: [Function],
      getCommitComment: [Function],
      getCommitSignatureProtection: [Function],
      getCommunityProfileMetrics: [Function],
      getContent: [Function],
      getContributorsStats: [Function],
      getDeployKey: [Function],
      getDeployment: [Function],
      getDeploymentStatus: [Function],
      getEnvironment: [Function],
      getLatestPagesBuild: [Function],
      getLatestRelease: [Function],
      getPages: [Function],
      getPagesBuild: [Function],
      getPagesHealthCheck: [Function],
      getParticipationStats: [Function],
      getPullRequestReviewProtection: [Function],
      getPunchCardStats: [Function],
      getReadme: [Function],
      getReadmeInDirectory: [Function],
      getRelease: [Function],
      getReleaseAsset: [Function],
      getReleaseByTag: [Function],
      getStatusChecksProtection: [Function],
      getTeamsWithAccessToProtectedBranch: [Function],
      getTopPaths: [Function],
      getTopReferrers: [Function],
      getUsersWithAccessToProtectedBranch: [Function],
      getViews: [Function],
      getWebhook: [Function],
      getWebhookConfigForRepo: [Function],
      getWebhookDelivery: [Function],
      listAutolinks: [Function],
      listBranches: [Function],
      listBranchesForHeadCommit: [Function],
      listCollaborators: [Function],
      listCommentsForCommit: [Function],
      listCommitCommentsForRepo: [Function],
      listCommitStatusesForRef: [Function],
      listCommits: [Function],
      listContributors: [Function],
      listDeployKeys: [Function],
      listDeploymentStatuses: [Function],
      listDeployments: [Function],
      listForAuthenticatedUser: [Function],
      listForOrg: [Function],
      listForUser: [Function],
      listForks: [Function],
      listInvitations: [Function],
      listInvitationsForAuthenticatedUser: [Function],
      listLanguages: [Function],
      listPagesBuilds: [Function],
      listPublic: [Function],
      listPullRequestsAssociatedWithCommit: [Function],
      listReleaseAssets: [Function],
      listReleases: [Function],
      listTags: [Function],
      listTeams: [Function],
      listWebhookDeliveries: [Function],
      listWebhooks: [Function],
      merge: [Function],
      mergeUpstream: [Function],
      pingWebhook: [Function],
      redeliverWebhookDelivery: [Function],
      removeAppAccessRestrictions: [Function],
      removeCollaborator: [Function],
      removeStatusCheckContexts: [Function],
      removeStatusCheckProtection: [Function],
      removeTeamAccessRestrictions: [Function],
      removeUserAccessRestrictions: [Function],
      renameBranch: [Function],
      replaceAllTopics: [Function],
      requestPagesBuild: [Function],
      setAdminBranchProtection: [Function],
      setAppAccessRestrictions: [Function],
      setStatusCheckContexts: [Function],
      setTeamAccessRestrictions: [Function],
      setUserAccessRestrictions: [Function],
      testPushWebhook: [Function],
      transfer: [Function],
      update: [Function],
      updateBranchProtection: [Function],
      updateCommitComment: [Function],
      updateInformationAboutPagesSite: [Function],
      updateInvitation: [Function],
      updatePullRequestReviewProtection: [Function],
      updateRelease: [Function],
      updateReleaseAsset: [Function],
      updateStatusCheckPotection: [Function],
      updateStatusCheckProtection: [Function],
      updateWebhook: [Function],
      updateWebhookConfigForRepo: [Function],
      uploadReleaseAsset: [Function]
    },
    search: {
      code: [Function],
      commits: [Function],
      issuesAndPullRequests: [Function],
      labels: [Function],
      repos: [Function],
      topics: [Function],
      users: [Function]
    },
    secretScanning: {
      getAlert: [Function],
      listAlertsForOrg: [Function],
      listAlertsForRepo: [Function],
      updateAlert: [Function]
    },
    teams: {
      addOrUpdateMembershipForUserInOrg: [Function],
      addOrUpdateProjectPermissionsInOrg: [Function],
      addOrUpdateRepoPermissionsInOrg: [Function],
      checkPermissionsForProjectInOrg: [Function],
      checkPermissionsForRepoInOrg: [Function],
      create: [Function],
      createDiscussionCommentInOrg: [Function],
      createDiscussionInOrg: [Function],
      deleteDiscussionCommentInOrg: [Function],
      deleteDiscussionInOrg: [Function],
      deleteInOrg: [Function],
      getByName: [Function],
      getDiscussionCommentInOrg: [Function],
      getDiscussionInOrg: [Function],
      getMembershipForUserInOrg: [Function],
      list: [Function],
      listChildInOrg: [Function],
      listDiscussionCommentsInOrg: [Function],
      listDiscussionsInOrg: [Function],
      listForAuthenticatedUser: [Function],
      listMembersInOrg: [Function],
      listPendingInvitationsInOrg: [Function],
      listProjectsInOrg: [Function],
      listReposInOrg: [Function],
      removeMembershipForUserInOrg: [Function],
      removeProjectInOrg: [Function],
      removeRepoInOrg: [Function],
      updateDiscussionCommentInOrg: [Function],
      updateDiscussionInOrg: [Function],
      updateInOrg: [Function]
    },
    users: {
      addEmailForAuthenticated: [Function],
      block: [Function],
      checkBlocked: [Function],
      checkFollowingForUser: [Function],
      checkPersonIsFollowedByAuthenticated: [Function],
      createGpgKeyForAuthenticated: [Function],
      createPublicSshKeyForAuthenticated: [Function],
      deleteEmailForAuthenticated: [Function],
      deleteGpgKeyForAuthenticated: [Function],
      deletePublicSshKeyForAuthenticated: [Function],
      follow: [Function],
      getAuthenticated: [Function],
      getByUsername: [Function],
      getContextForUser: [Function],
      getGpgKeyForAuthenticated: [Function],
      getPublicSshKeyForAuthenticated: [Function],
      list: [Function],
      listBlockedByAuthenticated: [Function],
      listEmailsForAuthenticated: [Function],
      listFollowedByAuthenticated: [Function],
      listFollowersForAuthenticatedUser: [Function],
      listFollowersForUser: [Function],
      listFollowingForUser: [Function],
      listGpgKeysForAuthenticated: [Function],
      listGpgKeysForUser: [Function],
      listPublicEmailsForAuthenticated: [Function],
      listPublicKeysForUser: [Function],
      listPublicSshKeysForAuthenticated: [Function],
      setPrimaryEmailVisibilityForAuthenticated: [Function],
      unblock: [Function],
      unfollow: [Function],
      updateAuthenticated: [Function]
    }
  },
  paginate: [Function: bound paginate] { iterator: [Function: bound iterator] }
}
      13) should publish even when package.json's binary.remote_path property is not provided and instead the version is hard coded within binary.host


  0 passing (167ms)
  13 failing

  1) Publishes packages to GitHub Releases
       Publishes without an error under all options
         should publish without error in all scenarios:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:46:13)
      at processImmediate (internal/timers.js:464:21)

  2) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when missing repository.url in package.json:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:110:13)
      at processImmediate (internal/timers.js:464:21)

  3) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when a correctly formatted GitHub repository.url is not found in package.json:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:121:13)
      at processImmediate (internal/timers.js:464:21)

  4) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when missing binary.host in package.json:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:134:13)
      at processImmediate (internal/timers.js:464:21)

  5) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when binary.host does not begin with the correct url:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:145:13)
      at processImmediate (internal/timers.js:464:21)

  6) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when the NODE_PRE_GYP_GITHUB_TOKEN environment variable is not found:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:156:13)
      at processImmediate (internal/timers.js:464:21)

  7) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when octokit.repos.getReleases returns an error:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:165:13)
      at processImmediate (internal/timers.js:464:21)

  8) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when octokit.repos.createRelease returns an error:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:178:13)
      at processImmediate (internal/timers.js:464:21)

  9) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when the stage directory structure is missing:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:192:13)
      at processImmediate (internal/timers.js:464:21)

  10) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when there are no files found within the stage directory:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:203:13)
      at processImmediate (internal/timers.js:464:21)

  11) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when a staged file already exists in the current release:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:214:13)
      at processImmediate (internal/timers.js:464:21)

  12) Publishes packages to GitHub Releases
       Throws an error when node-pre-gyp-github is not configured properly
         should throw an error when github.releases.uploadAsset returns an error:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:230:13)
      at processImmediate (internal/timers.js:464:21)

  13) Publishes packages to GitHub Releases
       Verify backwords compatible with any breaking changes made within the same MINOR version.
         should publish even when package.json's binary.remote_path property is not provided and instead the version is hard coded within binary.host:
     TypeError: Cannot stub non-existent property authenticate
      at Function.stub (node_modules/sinon/lib/sinon/stub.js:78:15)
      at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:388:37)
      at reset_mocks (test/test.js:30:13)
      at Context.<anonymous> (test/test.js:246:13)
      at processImmediate (internal/timers.js:464:21)



